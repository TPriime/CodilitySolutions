 A binary gap within a positive integer N is any maximal sequence of consecutive zeros that is surrounded by ones at both ends in the binary
 representation of N. for example, number 9 has a binary representation 1001 and contains a binary gap of 2. The number 529 has a binary representation
1000010001 and contains two binary gaps: one of length 4 and one of length 3. The number 20 has binary representation 10100 and contains one binary gap,
the number 15 has binary representation 1111 and has no binary gap. The number 332 has binary representation 100000 and has no binary gap.
Write a function:
 int solution(int N);
that, given a positive integer, returns the length of its longest binary gap. The function should return zero if N does not contain a binary gap.
 for example, given N = 1041
the function should return 5, because N has binary representation 10000010001 and so its longest binary gap is of length 5. given N = 32, the function should
return 0, because N has binary representation 100000 and thus no binary gap.

Write an efficient algorithm for the following assumptions:

N is an integer within the range [1...2,147,483,647].
                     Algorithm
1. prompt the user to enter a positive integer value.
2. check if the value entered is within the required range.
3. if it is, execute further, else, print invalid Integer and end.
4. convert the the entered integer to base binary string.
5. check if there is any binary gap. if yes continue, else return 0.
6.  if continued, check the length of binary gap(s)
7.  if the gap is one, return its length, else return the length of the longest gap.